{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","style","fontStyle","fontSize","fontWeight","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","navigator","clipboard","writeText","float","textDecoration","filter","element","length","Math","round","defaultProps","about","Alert","height","alert","role","word","lo","charAt","slice","capitalize","message","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAIe,SAASA,EAAOC,GAC7B,OACE,qBACEC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UACE,mBACEA,UAAU,eACVE,KAAK,IACLC,MAAO,CACLC,UAAW,SACXC,SAAU,OACVC,WAAY,QANhB,SASGP,EAAMQ,QAET,wBACEP,UAAU,iBACVQ,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMR,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BS,GAAG,yBAA7C,UACE,oBAAIT,UAAU,oCACd,sBACEA,UAAS,sCACQ,UAAfD,EAAME,KAAmB,OAAS,SAFtC,UAKE,uBACED,UAAU,mBACVU,QAASX,EAAMY,WACfH,KAAK,WACLC,GAAG,2BAEL,uBACET,UAAU,mBACVY,QAAQ,yBAFV,iCC1CG,SAASC,EAASd,GAC/B,MAAwBe,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA6CA,OACE,mCACE,qBAAKhB,UAAU,YAAf,SACE,sBAAKG,MAAO,CAAEc,MAAsB,SAAflB,EAAME,KAAkB,QAAU,SAAvD,UACE,sBAAKD,UAAU,kBAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBD,EAAMmB,UAC5B,qBAAKlB,UAAU,OAAf,SAEE,0BACEA,UAAU,eACVmB,MAAOJ,EACPK,SAlBS,SAACC,GAEtBL,EAAQK,EAAMC,OAAOH,QAiBThB,MAAO,CACLoB,gBAAgC,SAAfxB,EAAME,KAAkB,UAAY,QACrDgB,MAAsB,SAAflB,EAAME,KAAkB,QAAU,SAE3CQ,GAAG,QACHe,KAAK,QAIT,wBACEhB,KAAK,SACLR,UACiB,UAAfD,EAAME,KACF,2CACA,mCAENS,QAvEU,WAEpB,IAAIe,EAAUV,EAAKW,cACnBV,EAAQS,GACR1B,EAAM4B,UAAU,0BAA2B,YA4DnC,kCAWA,wBACEnB,KAAK,SACLR,UACiB,UAAfD,EAAME,KACF,2CACA,mCAENS,QA3EU,WACpB,IAAIe,EAAUV,EAAKa,cACnBZ,EAAQS,GACR1B,EAAM4B,UAAU,0BAA2B,YAiEnC,kCAWA,wBACEnB,KAAK,SACLR,UACiB,UAAfD,EAAME,KACF,2CACA,mCAENS,QAhFS,WAGnB,IAAIe,EAAUV,EAAKc,MAAM,QACzBb,EAAQS,EAAQK,KAAK,MACrB/B,EAAM4B,UAAU,iCAAkC,YAoE1C,2BAWA,wBACEnB,KAAK,SACLR,UACiB,UAAfD,EAAME,KACF,2CACA,mCAENS,QAnFS,WAEnB,IAAIK,EAAOgB,SAASC,eAAe,SAGnCC,UAAUC,UAAUC,UAAUpB,EAAKI,OAEnCpB,EAAM4B,UAAU,uBAAwB,YAqEhC,uBAWA,wBACEnB,KAAK,SACLR,UACiB,UAAfD,EAAME,KACF,2CACA,mCAENS,QApFQ,WAClBM,EAAQ,IACRjB,EAAM4B,UAAU,WAAY,YA2EpB,mBAWA,qBAAKxB,MAAO,CAAEiC,MAAO,SAArB,SACE,mBACEpC,UACiB,UAAfD,EAAME,KACF,0CACA,kCAENE,MAAO,CAAEkC,eAAgB,QACzBnC,KAAK,qCAPP,+BAaJ,sBAAKF,UAAU,uBAAf,UACE,8CACA,8BAGIe,EAAKc,MAAM,OAAOS,QAAO,SAACC,GACxB,OAA0B,IAAnBA,EAAQC,UACdA,OACH,IANJ,aAOazB,EAAKyB,OAPlB,iBASA,yDAC2B,IACxBC,KAAKC,MAA+B,KAAzB3B,EAAKc,MAAM,KAAKW,QAF9B,cAIA,yCACA,4BACGzB,EAAKyB,OAAS,EACXzB,EACA,wPD7FlBjB,EAAO6C,aAAe,CACpBpC,MAAO,QACPqC,MAAO,SE9CMC,MAnBf,SAAe9C,GAKb,OACE,qBAAKI,MAAO,CAAE2C,OAAQ,QAAtB,SACG/C,EAAMgD,OACL,sBACE/C,UAAS,sBAAiBD,EAAMgD,MAAMvC,KAA7B,gCACTwC,KAAK,QAFP,UAIE,iCAXW,SAACC,GAClB,IAAMC,EAAKD,EAAKrB,cAChB,OAAOsB,EAAGC,OAAO,GAAGzB,cAAgBwB,EAAGE,MAAM,GAS9BC,CAAWtD,EAAMgD,MAAMvC,QAJlC,KAIoDT,EAAMgD,MAAMO,cCoCzDC,MA1Cf,WACE,MAAwBzC,mBAAS,SAAjC,mBAAOb,EAAP,KAAauD,EAAb,KACA,EAA0B1C,mBAAS,MAAnC,mBAAOiC,EAAP,KAAcU,EAAd,KAEM9B,EAAY,SAAC2B,EAAS9C,GAC1BiD,EAAS,CACPH,QAASA,EACT9C,KAAMA,IAERkD,YAAW,WACTD,EAAS,QACR,OAgBL,OACE,qCACE,cAAC3D,EAAD,CAAQS,MAAM,YAAYN,KAAMA,EAAMU,WAfvB,WACJ,UAATV,GACFuD,EAAQ,QACRzB,SAAS4B,KAAKxD,MAAMoB,gBAAkB,UACtCI,EAAU,6BAA8B,aAIxC6B,EAAQ,SACRzB,SAAS4B,KAAKxD,MAAMoB,gBAAkB,QACtCI,EAAU,8BAA+B,eAMzC,cAAC,EAAD,CAAOoB,MAAOA,IACd,qBAAK/C,UAAU,kBAAf,SACE,cAACa,EAAD,CACEc,UAAWA,EACXT,QAAQ,mEACRjB,KAAMA,UC/BD2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,K","file":"static/js/main.b87cdb4f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a\r\n          className=\"navbar-brand\"\r\n          href=\"#\"\r\n          style={{\r\n            fontStyle: \"normal\",\r\n            fontSize: \"28px\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\"></ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              DarkMode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// to check if the props are of the same types as you want\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\n// to set default prop value if not passed\r\nNavbar.defaultProps = {\r\n  title: \"Title\",\r\n  about: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n// import { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  // const [copied, setCopied] = useState(false);\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n  };\r\n\r\n  const handleSpaces = () => {\r\n    // console.log(\"On change\");\r\n    //regex to split the words into array and then join them with one space\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Whitespaces have been removed!\", \"success\");\r\n  };\r\n\r\n  const handleOnCopy = () => {\r\n    // setCopied(true);\r\n    var text = document.getElementById(\"myBox\");\r\n    // using navigator - no need to select and deselect\r\n    // text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    // document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Copied to clipboard!\", \"success\");\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Cleared!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  //text = \"new text\"; - wrong way to change the state\r\n  //setText(\"new text\"); - correct way to change the state\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n          <div className=\"container-fluid\">\r\n            <h4 className=\"my-3\">{props.heading}</h4>\r\n            <div className=\"mb-3\">\r\n              {/* <label for=\"myBox\" className=\"form-label\">Example textarea</label> */}\r\n              <textarea\r\n                className=\"form-control\"\r\n                value={text}\r\n                onChange={handleOnChange}\r\n                style={{\r\n                  backgroundColor: props.mode === \"dark\" ? \"#343a40\" : \"white\",\r\n                  color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n                }}\r\n                id=\"myBox\"\r\n                rows=\"8\"\r\n              ></textarea>\r\n            </div>\r\n            {/* you can add custom css if you want */}\r\n            <button\r\n              type=\"button\"\r\n              className={\r\n                props.mode === \"light\"\r\n                  ? \"btn btn-outline-primary btn-sm mx-1 my-1\"\r\n                  : \"btn btn-primary btn-sm mx-1 my-1\"\r\n              }\r\n              onClick={handleUpClick}\r\n            >\r\n              Convert to Uppercase\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={\r\n                props.mode === \"light\"\r\n                  ? \"btn btn-outline-primary btn-sm mx-1 my-1\"\r\n                  : \"btn btn-primary btn-sm mx-1 my-1\"\r\n              }\r\n              onClick={handleLoClick}\r\n            >\r\n              Convert to Lowercase\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={\r\n                props.mode === \"light\"\r\n                  ? \"btn btn-outline-primary btn-sm mx-1 my-1\"\r\n                  : \"btn btn-primary btn-sm mx-1 my-1\"\r\n              }\r\n              onClick={handleSpaces}\r\n            >\r\n              Remove Spaces\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={\r\n                props.mode === \"light\"\r\n                  ? \"btn btn-outline-primary btn-sm mx-1 my-1\"\r\n                  : \"btn btn-primary btn-sm mx-1 my-1\"\r\n              }\r\n              onClick={handleOnCopy}\r\n            >\r\n              Copy Text\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className={\r\n                props.mode === \"light\"\r\n                  ? \"btn btn-outline-primary btn-sm mx-1 my-1\"\r\n                  : \"btn btn-primary btn-sm mx-1 my-1\"\r\n              }\r\n              onClick={handleReset}\r\n            >\r\n              Reset\r\n            </button>\r\n            <div style={{ float: \"right\" }}>\r\n              <a\r\n                className={\r\n                  props.mode === \"light\"\r\n                    ? \"btn btn-outline-danger btn-sm mx-1 my-1\"\r\n                    : \"btn btn-danger btn-sm mx-1 my-1\"\r\n                }\r\n                style={{ textDecoration: \"none\" }}\r\n                href=\"https://doc-maker-ui.herokuapp.com\"\r\n              >\r\n                Create a Doc\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"container-fluid my-3\">\r\n            <h4>Text Summary</h4>\r\n            <p>\r\n              {\r\n                // filter method to remove the 0 word bug\r\n                text.split(/\\s+/).filter((element) => {\r\n                  return element.length !== 0;\r\n                }).length\r\n              }{\" \"}\r\n              words and {text.length} characters\r\n            </p>\r\n            <p>\r\n              Estimated time to read :{\" \"}\r\n              {Math.round(text.split(\" \").length * 0.008)} minutes\r\n            </p>\r\n            <h4>Preview</h4>\r\n            <p>\r\n              {text.length > 0\r\n                ? text\r\n                : \"Wordifier gives you a way to analyze your text quickly and efficiently. It is a free web tool that provides an instant word & character count. It includes features such as converting to upper and lower cases, removing witespaces etc.\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lo = word.toLowerCase();\r\n    return lo.charAt(0).toUpperCase() + lo.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n// import About from \"./components/About\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#343a40\";\n      showAlert(\"Darkmode has been enabled!\", \"success\");\n      // to change the title dynamically\n      // document.title = \"Wordifier - Dark\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Darkmode has been disabled!\", \"success\");\n    }\n  };\n  return (\n    <>\n      <Navbar title=\"Wordifier\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container-fluid\">\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Wordifier - Word Counter, Character Counter, Remove Extra Spaces\"\n          mode={mode}\n        ></TextForm>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}